<?php
//时间频度： 一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)
//T(n)=O(f(n))
//每条语句执行一次所需的时间均是单位时间，一个算法的时间耗费就是该算法中所有语句的频度之和。
/**
    for(i=0; i<n;i++) //n
    for (j=0;j<n;j++) { //n*n
        C[i][j]=0; //n²
        for (k=0; k<n; k++) //n²*n
        C[i][j]=C[i][j]+A[i][k]*B[k][j];//n³
    }
    //T(n)=2n^3+3n^2+2n(1.1)
    //当N足够大时  T(n)与O(n^3)之间是一个不等于零常数，所以  T(n)=O(n^3)
 */ 


/**
按数量级递增排列，常见的时间复杂度有：
常数阶O(1),对数阶O(log2n)(以2为底n的对数，下同),线性阶O(n),
线性对数阶O(nlog2n),平方阶O(n^2)，立方阶O(n^3),...，
k次方阶O(n^k),指数阶O(2^n)。随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低。
*/

//O(1)
for ($i=0; $i < 100; $i++) { 
	# code...
}

//O(n)
for ($i=0; $i < $n; $i++) { 
	# code...
}


//O(n^2)
for ($i=0; $i < $n; $i++) { 
	for ($i=0; $i < $n ; $i++) { 
		# code...
	}
}

//O(n^3)
for ($i=0; $i < $n; $i++) { 
	for ($i=0; $i < $n ; $i++) { 
		for ($i=0; $i < $n; $i++) { 
			# code...
		}
	}
}

//O(n^k) --- 不确定
function test($k)
{
	for ($i=0; $i < $n; $i++) { 
		test($i);
	}
}


//空间复杂度是指算法在计算机内执行时所需存储空间的度量，S(n)=O(f(n))
/**
算法执行期间所需要的存储空间包括3个部分：
算法程序所占的空间；
输入的初始数据所占的存储空间；
算法执行过程中所需要的额外空间。
*/




